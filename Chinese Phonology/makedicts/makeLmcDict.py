# -*- coding: utf-8 -*-
import codecs, pickle, utilities

lineToCodepoints = utilities.lineToCodepoints
pp = utilities.pp

# Pulleyblank's Late Middle Chinese autogenerated.

# The strategy is to derive a phonetic representation from features
# whose value is deduced from the Yunjing tables. These dictionaries
# hold default values which are modified in particular cases noted later.
# Based on Pulleyblank, Middle Chinese, chapter 3.

# Dictionaries
# Initials by Yunjing column
initialDict = {1:u"p",    2:u"p‘",  3:u"pɦ",   4:u"m",
               5:u"t",    6:u"t‘",  7:u"tɦ",   8:u"n",
               9:u"k",   10:u"k‘",  11:u"kɦ",  12:u"ŋ",
               13:u"ts", 14:u"ts‘", 15:u"tsɦ", 16:u"s",  17:u"sɦ",
               18:u"ʔ",  19:u"x",   20:u"xɦ",  21:u"",
               22:u"l",  23:u"r"}
# Place of articulation by groupings of Yunjing colums
articulationDict = {1:u"p",    2:u"p",   3:u"p",   4:u"p",
                    5:u"t",    6:u"t",   7:u"t",   8:u"t",
                    9:u"k",   10:u"k",  11:u"k",  12:u"k",
                    13:u"ts", 14:u"ts", 15:u"ts", 16:u"ts", 17:u"ts",
                    18:u"h",  19:u"h",  20:u"h" , 21:u"h",
                    22:u"l",
                    23:u"r"}
# Grade II retroflexes correspond to dentals elsewhere.
retroflexStopInitialDict = {5:u"tr",6:u"tr‘",7:u"trɦ",8:u"nr"}
retroflexSibilantInitialDict = {13:u"tʂ",14:u"tʂ‘",15:u"tʂɦ",16:u"ʂ",17:u"ʂɦ"}
# Labials are fricative under certains circumstance
# (an important difference between LMC and EMC).
labialFricativeInitialDict = {1:u"f",2:u"f",3:u"fɦ",4:u"ʋ"}
# Some syllables contain a glide before the vowel: 
# its value depends on the grade and the features neiwai and kaihe.
glideDict = {"k":{"kai":{"wai":{1:u"", 2:u"j", 3:u"i", 4:u"ji"},    # k  # -  j  i  ji
                         "nei":{1:u"ǝ",2:u"",  3:u"i", 4:u"ji"}},   #    # ǝ  -  i  ji
                  "he":{"wai":{1:u"u", 2:u"w", 3:u"y", 4:u"jy"},    #    # u  w  y  jy
                        "nei":{1:u"u", 2:u"",  3:u"y", 4:u"jy"}}},  #    # u  -  y  jy
             "t":{"kai":{"wai":{1:u"", 2:u"",  3:u"i", 4:u"i"},     # t  # -  -  i  i 
                         "nei":{1:u"ǝ",2:u"",  3:u"i", 4:u"i"}},    #    # ǝ  -  i  i 
                  "he":{"wai":{1:u"u", 2:u"w", 3:u"y", 4:u""},      #    # u  w  y  - 
                        "nei":{1:u"u", 2:u"",  3:u"y", 4:u"u"}}},   #    # u  -  y  - 
             "p":{"kai":{"wai":{1:u"", 2:u"",  3:u"i", 4:u"ji"},    # p  # -  -  i  ji
                         "nei":{1:u"", 2:u"",  3:u"i", 4:u"ji"}},   #    # -  -  i  ji
                  "he":{"wai":{1:u"u", 2:u"",  3:u"jy",4:u""},      #    # u  -  jy - 
                        "nei":{1:u"u", 2:u"",  3:u"jy",4:u""}}},    #    # u  -  jy - 
             "ts":{"kai":{"wai":{1:u"",2:u"",  3:u"i", 4:u"i"},     # ts # -  -  i  i 
                         "nei":{1:u"ǝ",2:u"ǝ", 3:u"i", 4:u"i"}},    #    # ǝ  ǝ  i  i 
                  "he":{"wai":{1:u"u", 2:u"w", 3:u"y", 4:u"y"},     #    # u  w  y  y 
                        "nei":{1:u"u", 2:u"u", 3:u"y" ,4:u"y"}}},   #    # u  u  y  y 
             "h":{"kai":{"wai":{1:u"", 2:u"j", 3:u"i", 4:u"ji"},    # h  # -  j  i  ji
                         "nei":{1:u"ǝ",2:u"",  3:u"i", 4:u"ji"}},   #    # ǝ  -  i  ji
                  "he":{"wai":{1:u"u", 2:u"w", 3:u"y", 4:u"jy"},     #    # u  w  y  y 
                        "nei":{1:u"u", 2:u"",  3:u"y", 4:u"jy"}}},  #    # u  -  y  jy
             "l":{"kai":{"wai":{1:u"", 2:u"",  3:u"i", 4:u"i"},     # l  # -  -  i  i 
                         "nei":{1:u"ǝ",2:u"",  3:u"i", 4:u""}},     #    # ǝ  -  i  - 
                  "he":{"wai":{1:u"u", 2:u"",  3:u"y", 4:u""},      #    # u  -  y  - 
                        "nei":{1:u"u", 2:u"",  3:u"y", 4:u""}}},    #    # u  -  y  - 
             "r":{"kai":{"wai":{1:u"", 2:u"",  3:u"i", 4:u""},      # r  # -  -  i  - 
                         "nei":{1:u"", 2:u"",  3:u"i", 4:u""}},     #    # -  -  i  - 
                  "he":{"wai":{1:u"",  2:u"",  3:u"y", 4:u""},      #    # -  -  y  - 
                        "nei":{1:u"",  2:u"",  3:u"y", 4:u""}}}}    #    # -  -  y  - 
# The nuclear vowel is specific to the she.
nucleusDict = { 1:u"a",  2:u"a",  3:u"ǝ",  4:u"a",
                5:u"ǝ",  6:u"a",  7:u"ǝ",  8:u"a",
                9:u"ǝ", 10:u"a", 11:u"a",  12:u"ǝ",
               13:u"a", 14:u"ǝ", 15:u"a",  16:u"ǝ"}
# The final consonant or glide is specific to the she.
finalDict = { 1:u"ă",  2:u"ă",    3:u"ă",   4:u"j",
              5:u"j",  6:u"w",    7:u"w",   8:u"ăŋ",
              9:u"ăŋ", 10:u"jŋ", 11:u"wŋ", 12:u"wŋ",
             13:u"n", 14:u"n",   15:u"m",  16:u"m"}
# Fourth tone (rusheng) finals are stops.
tone4FinalDict = { 8:u"ăk", 9:u"ăk", 10:u"jk", 11:u"wk",12:u"wk",
                  13:u"t", 14:u"t",  15:u"p",  16:u"p"}
# The tone marks.
toneDict = {1:u"",2:u"´",3:u"`",4:u""}

# Get Yunjing dictionaries.
f=codecs.open("..\\dicts\\yunjingDict.py","rb")
yunjingDict = pickle.load(f)
f.close()

f=codecs.open("..\\dicts\\yunjingRhymeToSheDict.py","rb")
yunjingRhymeToSheDict = pickle.load(f)
f.close()

f=codecs.open("..\\dicts\\yunjingRhymeToKaiheDict.py","rb")
yunjingRhymeToKaiheDict = pickle.load(f)
f.close()

f=codecs.open("..\\dicts\\yunjingRhymeToNeiwaiDict.py","rb")
yunjingRhymeToNeiwaiDict = pickle.load(f)
f.close()

f=codecs.open("..\\dicts\\yunjingToGuangyunDict.py","rb")
yunjingToGuangyunDict = pickle.load(f)
f.close()

# To each character in Yunjing assign the features represnted by Yunjing.
yunjing = []
yjId = 0
while yjId < len(yunjingDict):
    codepoint = yunjingDict[yjId]["codepoint"]
    glyph = yunjingDict[yjId]["glyph"]
    initial = yunjingDict[yjId]["initial"]
    grade = yunjingDict[yjId]["grade"]
    tone = yunjingDict[yjId]["tone"]
    rhyme = yunjingDict[yjId]["rhyme"]
    she = yunjingRhymeToSheDict[rhyme]     
    kaihe = yunjingRhymeToKaiheDict[rhyme]["corrected"] # The Yunjing text gives wrong values
    neiwai = yunjingRhymeToNeiwaiDict[rhyme]["corrected"]              # for kaihe and neiwai: Pulleyblank p. 71-3.
    yunjing.append([yjId,codepoint,glyph,initial,grade,tone,rhyme,she,kaihe,neiwai])
    yjId += 1

# Certain modifications are needed to derive phonetic values
# (labialisation after labials and retroflexives).
newYunjing = []
for line in yunjing:
    yjId = line[0]
    codepoint = line[1]
    glyph = line[2]
    initial = line[3]
    grade = line[4]
    tone = line[5]
    rhyme = line[6]
    she = line[7]
    kaihe = line[8]
    neiwai = line[9]
    articulation = articulationDict[initial]
    # Pulleyblank p. 123
##    if rhyme == 2 and grade in [2,3] and articulation == u"t":
##        kaihe = u"kai"
    # Pulleyblank p. 121-2
    if she == 11 and tone == 4 and articulation == u"k":
        kaihe = u"he"
    elif she == 11 and tone == 4 and initial == 18:
        kaihe = u"he"
    # Pulleyblank p. 112-3
    elif she == 6 and grade == 1 and articulation == u"p":
        kaihe = u"he"
    elif she == 12 and grade in [3,4] and rhyme == 2:
        kaihe = u"he"
    elif she == 12 and grade in [3,4] and articulation == u"p" and initial != 4:
        kaihe = u"he"
    # A change between EMC and LMC: Pulleyblank 123-4.
    if rhyme == 40:
        neiwai = u"wai"
    newYunjing.append([yjId,codepoint,glyph,initial,grade,tone,rhyme,she,kaihe,neiwai])
yunjing = newYunjing

# So far we have assigned features to every cell in Yunjing, but we only want to
# generate phonetic values for cells containing characters, and those empty cells 
# which map on to Guangyun.
newYunjing = []
for line in yunjing:
    yjId = line[0]
    codepoint = line[1]
    if codepoint != "U+3007" or yunjingToGuangyunDict.has_key(yjId):
        newYunjing.append(line)
yunjing = newYunjing

# From features to phonetic values.
lmcDict = {}
for line in yunjing:
    yjId = line[0]
    codepoint = line[1]
    glyph = line[2]
    initial = line[3]
    grade = line[4]
    tone = line[5]
    rhyme = line[6]
    she = line[7]
    kaihe = line[8]
    neiwai = line[9]
    articulation = articulationDict[initial]
    #
    # Generate the initial.
    #
    initialReading = initialDict[initial]
    # Retroflex stops and nasals in grades 2 and 3
    if grade in [2,3] and retroflexStopInitialDict.has_key(initial):
        initialReading = retroflexStopInitialDict[initial]
    # Retroflex sibilants in grades 2 and 3
    elif grade in [2,3] and retroflexSibilantInitialDict.has_key(initial):
        initialReading = retroflexSibilantInitialDict[initial]
    # Labial fricatives in grade 3 hekou (except she VII lacks ʋ).
    elif grade == 3 and kaihe == "he" and articulation == u"p" and not(initial == 4 and she == 7):
        initialReading = labialFricativeInitialDict[initial]
    elif grade == 4 and initial == 21:
        initialReading = u"j"
    #
    # Generate the pre-nuclear glide.
    #
    articulation = articulationDict[initial]
    glide = glideDict[articulation][kaihe][neiwai][grade]
    if initialReading == u"j" and glide[0] == u"j":
        initialReading = u""
    #
    # Generate the nuclear vowel.
    #
    nucleus = nucleusDict[she]
    # The zhong rhyme: Pulleyblank p. 123-4.
    if rhyme == 2 and grade in [3,4]:
        nucleus = u"a"
    # The vowel "a" lengthened in grade 2: Pulleyblank p. 79-84.
    if nucleus == u"a" and grade == 2:
        nucleus = u"aa"
    # The vowel "ǝ" dropped after glide: Pulleyblank p. 79-84.
    if glide != u"" and nucleus == u"ǝ":
        nucleus = u""
    if glide == u"j" and nucleus == u"":
        glide = u"i"
    if glide == u"w" and nucleus == u"":
        glide = u"u"
    #
    # Generate the final.
    #
    final = finalDict[she]
    # In she V, ji becomes i and i becomes ŗ (in grades 2 and 3) or ȥ (in grades 1 and 4).
    # (Query: does ji -> r, z?)
    if glide in [u"ji",u"i",u"ǝ"] and nucleus == u"" and final == u"j":
        final = u""
    if articulation == "ts" \
       and grade == 2 \
       and glide in [u"ji",u"i",u"ǝ"] \
       and nucleus == u"" \
       and final == u"":
        glide = u"ŗ"
    if articulation == "ts" \
       and she == 5 \
       and nucleus == u"ǝ" \
       and final == u"j":
        glide = u"ŗ"
        nucleus = u""
        final = u""
    if articulation == "ts" \
       and grade in [1,4] \
       and glide in [u"ji",u"i"] \
       and nucleus == u"" \
       and final == u"":
        glide = u"ȥ"
    if articulation == "r" \
       and glide in [u"ji",u"i"] \
       and nucleus == u"" \
       and final == u"":
        glide = u"ȥ"
    if articulation == "ts" \
       and she == 11:
        glide = u"w"
    # The dang rhyme : Pulleyblankc 113-4
    if she == 8 and grade in [1,2] and kaihe == "kai":
        glide = u""
    if she == 8 and grade in [1] and kaihe == "he" and glide == u"u":
        glide = u"w"
    # Tone 4 (rusheng) has final stops.
    if tone == 4 and tone4FinalDict.has_key(she):
        final = tone4FinalDict[she]
    #
    # Generate the tone.
    #
    toneReading = toneDict[tone]
    reading = initialReading + glide + nucleus + final + toneReading
    lmcDict[yjId] = reading
    ctr += 1

# Write to file.
f=codecs.open("..\\dicts\\lmcDict.py","wb")
pickle.dump(lmcDict,f)
f.close()
